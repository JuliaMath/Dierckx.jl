using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libddierckx"], :libddierckx),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/kbarbary/DierckxBuilder/releases/download/v1.0.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, :glibc) => ("$bin_prefix/libddierckx.v1.0.0.i686-linux-gnu.tar.gz", "5428094daf3706e7798b0d08315ae43c0fe16aeb2d01725e8c9b2fb07d9aee08"),
    Windows(:i686) => ("$bin_prefix/libddierckx.v1.0.0.i686-w64-mingw32.tar.gz", "8895047fcb47a29e5aa19709c86492b2495cc875e9436fb2ddaf03645ad6c488"),
    MacOS(:x86_64) => ("$bin_prefix/libddierckx.v1.0.0.x86_64-apple-darwin14.tar.gz", "07e1d15fd8ef26670af3770529e754536c725bd3b84c0520a47f88b02ccbf490"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/libddierckx.v1.0.0.x86_64-linux-gnu.tar.gz", "13cc65da01f91b33a63d72415a25feabb136ae28b636b358d2c3e819347add2f"),
    Windows(:x86_64) => ("$bin_prefix/libddierckx.v1.0.0.x86_64-w64-mingw32.tar.gz", "1bc5f428331f946ef2ec41961037a6a16017ac4a8384dfe54dd41374caa25069"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
